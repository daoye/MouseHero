这是一个纯C语言编写的跨平台程序，它是一个鼠标键盘模拟器的服务端， 用来控制电脑鼠标、键盘和剪贴板的处理。
这个程序将会作为后台服务运行，UI部分将由另外的程序来实现。
这是一个使用libevent用作网络通行，rust的engino 用作鼠标键盘操作、arboard用作剪贴板操作的程序。

请你阅读这个项目的代码，帮我分析代码结构，看看有哪些问题。



好吧，接下来我们按照tests/todo给出的计划来完成单元测试，你需要一个模块一个模块的进行，当一个模块代码修改完毕后，你需要执行单元测试，修复发现的错误，然后观察覆盖率，直到所有用例都测试通过，且代码覆盖率达到85%后，再继续下一个模块。
单元测试代码放在tests目录下，该目录下面同时还有测试用的makefile


a) 内存管理问题：
客户端管理使用链表结构，但缺少完整的内存清理机制
Rust FFI接口中的字符串处理可能存在内存泄漏风险
b) 错误处理：
错误处理机制不够统一，有些地方直接返回-1，有些地方使用枚举
缺少详细的错误日志和错误恢复机制
c) 代码结构：
代码模块间的耦合度较高
缺少统一的接口抽象
配置管理过于简单，不支持动态重载
d) 跨平台兼容性：
Windows平台支持不完整（部分代码使用了POSIX API）
平台特定代码没有很好的隔离


不错，然后我们完成client manager 模块的单元测试吧。 单元测试所需要的内容都在tests子目录下。 你需要在tests目录下创建对应的单元测试。然后编写用例，运行测试，观察用例通过率，代码覆盖率。 我们要求用例全部通过，代码覆盖率不低于85%。


这是一个纯C语言编写的跨平台程序，它是一个鼠标键盘模拟器的服务端， 用来控制电脑鼠标、键盘和剪贴板的处理。
这个程序将会作为后台服务运行，UI部分将由另外的程序来实现。
这是一个使用libevent用作网络通行，rust的engino 用作鼠标键盘操作、arboard用作剪贴板操作的程序。

请检查todo文件，完成我们计划的“服务器核心类型”这个任务。（你始终要记住我们这个项目知识鼠标模拟器的服务端，要的是轻便简洁，稳定高效，不要做的太复杂）


这是一个纯C语言编写的跨平台程序，它是一个鼠标键盘模拟器的服务端， 用来控制电脑鼠标、键盘和剪贴板的处理。
这个程序将会作为后台服务运行，UI部分将由另外的程序来实现。
这是一个使用libevent用作网络通行，rust的engino 用作鼠标键盘操作、arboard用作剪贴板操作的程序。


ya_server, ya_server_command,ya_server_discover,ya_server_session, ya_http

是这个项目的核心，请分析这些模块，看看有哪些问题。
（你始终要记住我们这个项目知识鼠标模拟器的服务端，要的是轻便简洁，稳定高效，不要做的太复杂）



我们已经完成了计划，现在开始根据计划来一步步完成吧。 每完成一步你都要确保编译通过，且不要丢失原来的逻辑。一小步一小步的开始吧。






从todo的0.1开始， 一小步一小步的修改，每次修改完毕后确保编译通过，确保不要丢失原逻辑，完成每一步都要更新todo的完成状态。


继续下一步， 一小步一小步的修改，每次修改完毕后确保编译通过，确保不要丢失原逻辑，完成每一步都要更新todo的完成状态。
你完成后，自动继续后面的工作，不要每次都询问我。


这是一个纯C语言编写的跨平台程序，它是一个鼠标键盘模拟器的服务端， 用来控制电脑鼠标、键盘和剪贴板的处理。
这个程序将会作为后台服务运行，UI部分将由另外的程序来实现。
这是一个使用libevent用作网络通行，rust的engino 用作鼠标键盘操作、arboard用作剪贴板操作的程序。


好吧，接下来我们按照tests/todo给出的计划来完成单元测试，你需要一个模块一个模块的进行，当一个模块代码修改完毕后，你需要执行单元测试，修复发现的错误，然后观察覆盖率，直到所有用例都测试通过，且代码覆盖率达到90%后，再继续下一个模块。
你可以通过coverage.sh脚本运行测试观察覆盖率。
需要在build目录下进行编译。
每个模块完成后需要更新todo的完成状态（只需要更新状态，不要添加其他多余内容）



项目中有一个http server,该server 刚经历了一次代码重构，但是重构的工作还没有完全完成，我们需要继续完成重构的工作。 另外，http server 从配置中获取监听地址的方式应该跟session server/command server 的方式保持一致。