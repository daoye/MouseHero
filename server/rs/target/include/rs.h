#pragma once

/* Generated with cbindgen:0.27.0 */

// It's auto generate code DONT MODIFY THIS FILE

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum CButton
{
  Left,
  Middle,
  Right,
  Back,
  Forward,
  ScrollUp,
  ScrollDown,
  ScrollLeft,
  ScrollRight,
} CButton;

typedef enum CCoordinate
{
  Abs,
  Rel,
} CCoordinate;

typedef enum CDirection
{
  Press,
  Release,
  Click,
} CDirection;

typedef enum CKey
{
  Num0,
  Num1,
  Num2,
  Num3,
  Num4,
  Num5,
  Num6,
  Num7,
  Num8,
  Num9,
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
  V,
  W,
  X,
  Y,
  Z,
  AbntC1,
  AbntC2,
  Accept,
  Add,
  Alt,
  Apps,
  Attn,
  Backspace,
  Break,
  Begin,
  BrightnessDown,
  BrightnessUp,
  BrowserBack,
  BrowserFavorites,
  BrowserForward,
  BrowserHome,
  BrowserRefresh,
  BrowserSearch,
  BrowserStop,
  Cancel,
  CapsLock,
  Clear,
  Command,
  ContrastUp,
  ContrastDown,
  Control,
  Convert,
  Crsel,
  DBEAlphanumeric,
  DBECodeinput,
  DBEDetermineString,
  DBEEnterDLGConversionMode,
  DBEEnterIMEConfigMode,
  DBEEnterWordRegisterMode,
  DBEFlushString,
  DBEHiragana,
  DBEKatakana,
  DBENoCodepoint,
  DBENoRoman,
  DBERoman,
  DBESBCSChar,
  DBESChar,
  Decimal,
  Delete,
  Divide,
  DownArrow,
  Eject,
  End,
  Ereof,
  Escape_k,
  Execute,
  Exsel,
  F1,
  F2,
  F3,
  F4,
  F5,
  F6,
  F7,
  F8,
  F9,
  F10,
  F11,
  F12,
  F13,
  F14,
  F15,
  F16,
  F17,
  F18,
  F19,
  F20,
  F21,
  F22,
  F23,
  F24,
  F25,
  F26,
  F27,
  F28,
  F29,
  F30,
  F31,
  F32,
  F33,
  F34,
  F35,
  Function,
  Final,
  Find,
  GamepadA,
  GamepadB,
  GamepadDPadDown,
  GamepadDPadLeft,
  GamepadDPadRight,
  GamepadDPadUp,
  GamepadLeftShoulder,
  GamepadLeftThumbstickButton,
  GamepadLeftThumbstickDown,
  GamepadLeftThumbstickLeft,
  GamepadLeftThumbstickRight,
  GamepadLeftThumbstickUp,
  GamepadLeftTrigger,
  GamepadMenu,
  GamepadRightShoulder,
  GamepadRightThumbstickButton,
  GamepadRightThumbstickDown,
  GamepadRightThumbstickLeft,
  GamepadRightThumbstickRight,
  GamepadRightThumbstickUp,
  GamepadRightTrigger,
  GamepadView,
  GamepadX,
  GamepadY,
  Hangeul,
  Hangul,
  Hanja,
  Help,
  Home,
  Ico00,
  IcoClear,
  IcoHelp,
  IlluminationDown,
  IlluminationUp,
  IlluminationToggle,
  IMEOff,
  IMEOn,
  Insert,
  Junja,
  Kana,
  Kanji,
  LaunchApp1,
  LaunchApp2,
  LaunchMail,
  LaunchMediaSelect,
  Launchpad,
  LaunchPanel,
  LButton,
  LControl,
  LeftArrow,
  Linefeed,
  LMenu,
  LShift,
  LWin,
  MButton,
  MediaFast,
  MediaNextTrack,
  MediaPlayPause,
  MediaPrevTrack,
  MediaRewind,
  MediaStop,
  Meta,
  MissionControl,
  ModeChange,
  Multiply,
  NavigationAccept,
  NavigationCancel,
  NavigationDown,
  NavigationLeft,
  NavigationMenu,
  NavigationRight,
  NavigationUp,
  NavigationView,
  NoName,
  NonConvert,
  None,
  Numlock,
  Numpad0,
  Numpad1,
  Numpad2,
  Numpad3,
  Numpad4,
  Numpad5,
  Numpad6,
  Numpad7,
  Numpad8,
  Numpad9,
  OEM1,
  OEM102,
  OEM2,
  OEM3,
  OEM4,
  OEM5,
  OEM6,
  OEM7,
  OEM8,
  OEMAttn,
  OEMAuto,
  OEMAx,
  OEMBacktab,
  OEMClear,
  OEMComma,
  OEMCopy,
  OEMCusel,
  OEMEnlw,
  OEMFinish,
  OEMFJJisho,
  OEMFJLoya,
  OEMFJMasshou,
  OEMFJRoya,
  OEMFJTouroku,
  OEMJump,
  OEMMinus,
  OEMNECEqual,
  OEMPA1,
  OEMPA2,
  OEMPA3,
  OEMPeriod,
  OEMPlus,
  OEMReset,
  OEMWsctrl,
  Option,
  PA1,
  Packet,
  PageDown,
  PageUp,
  Pause,
  Play,
  Power,
  PrintScr,
  Processkey,
  RButton,
  RCommand,
  RControl,
  Redo,
  Return,
  RightArrow,
  RMenu,
  ROption,
  RShift,
  RWin,
  Scroll,
  ScrollLock,
  Select,
  ScriptSwitch,
  Separator,
  Shift,
  ShiftLock,
  Sleep_k,
  Space,
  Subtract,
  Tab,
  Undo,
  UpArrow,
  VidMirror,
  VolumeDown,
  VolumeMute,
  VolumeUp,
  MicMute,
  XButton1,
  XButton2,
  Zoom,
} CKey;

/**
 * Error codes returned by the library functions.
 * These values match the C enum definition.
 */
typedef enum YAError
{
  /**
   * Operation completed successfully
   */
  Success = 0,
  /**
   * Platform-specific error occurred
   */
  PlatformError = -1,
  /**
   * Clipboard operation failed
   */
  ClipboardError = -2,
  /**
   * Invalid input provided
   */
  InvalidInput = -3,
} YAError;

enum YAError key_unicode_action(uint32_t ch, enum CDirection direction);

enum YAError key_ascii_action(uint32_t ch, enum CDirection direction);

enum YAError move_mouse(int32_t x, int32_t y, enum CCoordinate coord);

enum YAError mouse_button(enum CButton button, enum CDirection direction);

enum YAError key_action(enum CKey key, enum CDirection direction);

enum YAError key_action_with_platform_code(uint32_t code, enum CDirection direction);

enum YAError key_action_with_code(char key, enum CDirection direction);

enum YAError enter_text(const char *text);

const char *clipboard_get(void);

enum YAError clipboard_set(const char *text);

void free_string(char *ptr);
